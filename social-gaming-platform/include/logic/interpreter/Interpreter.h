#pragma once

#include <memory>
#include <unordered_map>

#include "InterpreterState.h"
#include "IRule.h"


namespace logic
{
    class Interpreter
    {
    public:
        Interpreter(RuleSpecStack ruleSpecs, Session *session);

        /**
         * Add a custom rule to the interpreter.
         * If the ruleType has a rule assigned already, return False. True otherwise.
         */
        [[nodiscard]] bool
        registerRule(RuleType ruleType, std::shared_ptr<IRule> newRule) noexcept;

        /**
         * Execute rules off of the InterpreterState ruleSpecStack
         * until one of the following outcomes are generated by executing rules:
         * - INTERNAL_FAILURE
         * - NO_MORE_RULES_TO_EXECUTE
         * - SUCCESS_WAITING_FOR_INPUT
         * - SUCCESS_DELIVERING_OUTPUT
         */
        [[nodiscard]] RuleExecutionOutcome executeRules() noexcept;

        [[nodiscard]] InterpreterState const &getState() const noexcept;

    private:
        std::unordered_map<RuleType, std::shared_ptr<IRule>> rulesRegister;
        InterpreterState interpreterState;
    };
}
